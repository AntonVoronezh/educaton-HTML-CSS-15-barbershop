console.log('kkfff111');
const convert = items => items.reduce((acc, [key, value]) =>
  ({ ...acc, [key]: value instanceof Array ? convert(value) : value }), {});
  
  

let player;

function onYouTubeIframeAPIReady() {
    player = new YT.Player('player', {
        // height: '360',
        // width: '640',
        videoId: '2e0nEgLAro4',
        playerVars: {
            enablejsapi: 1,
            controls: 0,
            disablekb: 0,
            showinfo: 0,
            rel: 0,
            autoplay: 0,
            modestbranding: 1
        },
        events: {
            // 'onReady': onPlayerReady,
            // 'onStateChange': onPlayerStateChange
        }
    });
}

const getVideo = document.querySelector(".player__video");
const getVideoPlayPauseButton = document.querySelector(".video__play-pause");
const getcVideoIcon = document.querySelector(".control__video-icon");
const getTimeRange = document.querySelector(".control__time-range");
const getAudioPlayPauseButton = document.querySelector(".control__sound-icon");
const getSoundRange = document.querySelector(".control__sound-range");


getVideoPlayPauseButton.addEventListener('click', playPause);
getcVideoIcon.addEventListener('click', playPause);
getVideo.addEventListener('timeupdate', percentRange);
getTimeRange.addEventListener('input', progressRange);

getAudioPlayPauseButton.addEventListener('click', playAudio);
getSoundRange.addEventListener('input', percentSound);
function getCurrentTime() {
    var currentTime = player.getCurrentTime();
    return roundNumber(currentTime, 3);
  }
console.log(player.getPlayerState());

function playPause() {

    if (player.getPlayerState() !== 1) {
        player.playVideo();
        getVideoPlayPauseButton.style.opacity = '0';
    } else {
        player.pauseVideo();
        getVideoPlayPauseButton.style.opacity = '0.5';
    }
};




//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjEuanMiLCJ2aWRlby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zb2xlLmxvZygna2tmZmYxMTEnKTtcbmNvbnN0IGNvbnZlcnQgPSBpdGVtcyA9PiBpdGVtcy5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PlxuICAoeyAuLi5hY2MsIFtrZXldOiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5ID8gY29udmVydCh2YWx1ZSkgOiB2YWx1ZSB9KSwge30pO1xuICBcbiAgIiwiXHJcbmxldCBwbGF5ZXI7XHJcblxyXG5mdW5jdGlvbiBvbllvdVR1YmVJZnJhbWVBUElSZWFkeSgpIHtcclxuICAgIHBsYXllciA9IG5ldyBZVC5QbGF5ZXIoJ3BsYXllcicsIHtcclxuICAgICAgICAvLyBoZWlnaHQ6ICczNjAnLFxyXG4gICAgICAgIC8vIHdpZHRoOiAnNjQwJyxcclxuICAgICAgICB2aWRlb0lkOiAnMmUwbkVnTEFybzQnLFxyXG4gICAgICAgIHBsYXllclZhcnM6IHtcclxuICAgICAgICAgICAgZW5hYmxlanNhcGk6IDEsXHJcbiAgICAgICAgICAgIGNvbnRyb2xzOiAwLFxyXG4gICAgICAgICAgICBkaXNhYmxla2I6IDAsXHJcbiAgICAgICAgICAgIHNob3dpbmZvOiAwLFxyXG4gICAgICAgICAgICByZWw6IDAsXHJcbiAgICAgICAgICAgIGF1dG9wbGF5OiAwLFxyXG4gICAgICAgICAgICBtb2Rlc3RicmFuZGluZzogMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXZlbnRzOiB7XHJcbiAgICAgICAgICAgIC8vICdvblJlYWR5Jzogb25QbGF5ZXJSZWFkeSxcclxuICAgICAgICAgICAgLy8gJ29uU3RhdGVDaGFuZ2UnOiBvblBsYXllclN0YXRlQ2hhbmdlXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmNvbnN0IGdldFZpZGVvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wbGF5ZXJfX3ZpZGVvXCIpO1xyXG5jb25zdCBnZXRWaWRlb1BsYXlQYXVzZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudmlkZW9fX3BsYXktcGF1c2VcIik7XHJcbmNvbnN0IGdldGNWaWRlb0ljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbnRyb2xfX3ZpZGVvLWljb25cIik7XHJcbmNvbnN0IGdldFRpbWVSYW5nZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29udHJvbF9fdGltZS1yYW5nZVwiKTtcclxuY29uc3QgZ2V0QXVkaW9QbGF5UGF1c2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbnRyb2xfX3NvdW5kLWljb25cIik7XHJcbmNvbnN0IGdldFNvdW5kUmFuZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbnRyb2xfX3NvdW5kLXJhbmdlXCIpO1xyXG5cclxuXHJcbmdldFZpZGVvUGxheVBhdXNlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcGxheVBhdXNlKTtcclxuZ2V0Y1ZpZGVvSWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHBsYXlQYXVzZSk7XHJcbmdldFZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCBwZXJjZW50UmFuZ2UpO1xyXG5nZXRUaW1lUmFuZ2UuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBwcm9ncmVzc1JhbmdlKTtcclxuXHJcbmdldEF1ZGlvUGxheVBhdXNlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcGxheUF1ZGlvKTtcclxuZ2V0U291bmRSYW5nZS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHBlcmNlbnRTb3VuZCk7XHJcbmZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkge1xyXG4gICAgdmFyIGN1cnJlbnRUaW1lID0gcGxheWVyLmdldEN1cnJlbnRUaW1lKCk7XHJcbiAgICByZXR1cm4gcm91bmROdW1iZXIoY3VycmVudFRpbWUsIDMpO1xyXG4gIH1cclxuY29uc29sZS5sb2cocGxheWVyLmdldFBsYXllclN0YXRlKCkpO1xyXG5cclxuZnVuY3Rpb24gcGxheVBhdXNlKCkge1xyXG5cclxuICAgIGlmIChwbGF5ZXIuZ2V0UGxheWVyU3RhdGUoKSAhPT0gMSkge1xyXG4gICAgICAgIHBsYXllci5wbGF5VmlkZW8oKTtcclxuICAgICAgICBnZXRWaWRlb1BsYXlQYXVzZUJ1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBwbGF5ZXIucGF1c2VWaWRlbygpO1xyXG4gICAgICAgIGdldFZpZGVvUGxheVBhdXNlQnV0dG9uLnN0eWxlLm9wYWNpdHkgPSAnMC41JztcclxuICAgIH1cclxufTtcclxuXHJcblxyXG5cclxuIl19
